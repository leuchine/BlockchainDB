import pymssql
from utils import *
#connect to local MySQL
# def connect_MySQL():
# 	connection = mysql.connector.connect(user='root',\
# 		password='123456', host='127.0.0.1',database='blockchain')
# 	return connection

#connect to remote Azure SQL
def connect_Azure():
	connection=pymssql.connect(server='smartblockchain.database.windows.net:1433', \
		user='', password='', database='smartcontractdb')
	    #Use transaction for safety
	cursor=connection.cursor()
	cursor.execute("SET TRANSACTION ISOLATION LEVEL SERIALIZABLE")
	cursor.close()
	connection.autocommit(False)
	return connection

#set data in storage table
def set_storage_data(connection, address, item, value, msghash):
	insert= ("INSERT INTO storage "
               "(address, item, value, time, hash) "
               "VALUES (%s, %s, %s, getdate(), %s)")
	data= (repr(address), str(item), str(value), repr(msghash))
	cursor = connection.cursor()
	cursor.execute(insert, data)
	cursor.close()

	# insert= ("UPDATE storage "
	# 	"SET value=%s, time=getdate() WHERE address=%s and item=%s")
	# data= (str(value), repr(address), str(item))
	# cursor = connection.cursor()
	# cursor.execute(insert, data)
	# cursor.close()

#get data in storage table
def get_storage_data(connection, address, item):
	query= ("SELECT value FROM storage "
               "WHERE address=%s and item=%s ORDER BY sid DESC")
	data=(repr(address),str(item))
	cursor = connection.cursor()
	cursor.execute(query, data)
	for value in cursor:
		cursor.close()		
		return int(value[0])
	cursor.close()
	return 0

#get balance in account table
def get_balance(connection, address):
	query= ("SELECT balance FROM account "
               "WHERE address= %s ORDER BY aid DESC")
	data=(repr(address))
	cursor = connection.cursor()
	cursor.execute(query, data)
	for value in cursor:
		cursor.close()		
		return int(value[0])
	cursor.close()
	return 0

#delete balance record generated by the same transaction
def delete_balance(connection, address, hash):
	query= ("DELETE FROM account "
              "WHERE address= %s and hash=%s")
	data=(repr(address), repr(hash))
	cursor = connection.cursor()
	cursor.execute(query, data)

#transfer value from one account to another account
def transfer_value(connection, sender, to, value, msghash):
	#get sender,to balance
	senderbalance=get_balance(connection, sender)
	tobalance=get_balance(connection, to)
	#delete former transaction changes
	
	#delete_balance(connection, to, msghash)
	#delete_balance(connection, sender, msghash)
	#decide balance >=value
	if senderbalance < value:
		return False
	#update to balance
	#plus
	
	insert= ("INSERT INTO account "
		"(address, balance, hash) "
		"VALUES (%s, %s, %s)")
	data= (repr(to), tobalance+value, repr(msghash))
	cursor = connection.cursor()
	while True:
		try:
			cursor.execute(insert, data)
			break
		except:
			pass
	cursor.close()
	# insert= ("UPDATE account "
	# 	"SET balance=balance+%d WHERE address=%s")
	# data= (value, repr(to))
	# cursor = connection.cursor()
	# cursor.execute(insert, data)
	# cursor.close()
	#minus
	insert= ("INSERT INTO account "
			"(address, balance, hash) "
			"VALUES (%s, %s, %s)")
	data= (repr(sender),senderbalance-value, repr(msghash))
	cursor = connection.cursor()
	while True:
		try:
			cursor.execute(insert, data)
			break
		except:
			pass
	cursor.close()
	
	return True

#insert code into database
def insert_code(address, code, abi, connection):
	try:
		insert= ("INSERT INTO code "
	            "(addr, code, abi) "
	            "VALUES (%s, %s, %s)")
		data= (repr(address),repr(memory2bytecode(code)),repr(abi))
		cursor = connection.cursor()
		cursor.execute(insert, data)
		cursor.close()
	except:
		insert= ("UPDATE code "
			"SET code=%s, abi=%s WHERE address=%s")
		data= (repr(memory2bytecode(code)),repr(abi),repr(address))
		cursor = connection.cursor()
		cursor.execute(insert, data)
		cursor.close()		


#get code in code table
def get_code(connection, address):
	connection=connect_Azure()
	query= ("SELECT code FROM code "
               "WHERE addr= %s ")
	data=(repr(address))
	cursor = connection.cursor()
	cursor.execute(query, data)
	for value in cursor:
		cursor.close()		
		return eval(value[0])
	cursor.close()
	return None

#get abi of a contract
# def get_abi(address):
# 	connection=connect_MySQL()
# 	query= ("SELECT abi FROM code "
#                "WHERE addr=%(addr)s")
# 	data= {'addr': repr(address)}
# 	cursor = connection.cursor()
# 	cursor.execute(query, data)
# 	for value in cursor:
# 		connection.commit()
# 		cursor.close()
# 		connection.close()		
# 		return eval(value[0])
# 	cursor.close()
# 	connection.commit()
# 	connection.close()
# 	return None

#insert log into database
def insert_log(hash, output, connection):
	insert= ("INSERT INTO logs "
            "(hash, output) "
            "VALUES (%s, %s)")

	data= (repr(hash),repr(output))

	cursor = connection.cursor()
	cursor.execute(insert, data)
	cursor.close()

#query log table
def query_log(hashvalue):
	connection=connect_Azure()
	query= ("SELECT output FROM logs "
               "WHERE hash=%s")
	data= (repr(hashvalue))
	cursor = connection.cursor()
	cursor.execute(query, data)
	for value in cursor:
		connection.commit()
		cursor.close()
		connection.close()		
		return eval(value[0])
	cursor.close()
	connection.commit()
	connection.close()
	return None

#insert transaction into database
def insert_transaction(message, connection):
	insert= ("INSERT INTO transactions "
            "(hash, fromuser, touser, value, data) "
            "VALUES (%s, %s, %s, %s, %s)")

	d= message.data
	if message.to != None:
		d=message.data.originaldata

	data= (repr(message.hash),repr(message.sender), 
		repr(message.to), message.value, repr(d))
	cursor = connection.cursor()
	cursor.execute(insert, data)
	cursor.close()
	connection.commit()

def insert_associatedtx(message, connection):
	insert= ("INSERT INTO associatedtx "
            "(hash, fromuser, touser, value, data) "
            "VALUES (%s, %s, %s, %s, %s)")
	d= message.data
	if message.to != None:
		d=message.data.originaldata

	data= (repr(message.hash),repr(message.sender), 
		repr(message.to), message.value, repr(d))
	cursor = connection.cursor()
	cursor.execute(insert, data)
	cursor.close()

#insert into account table
def insert_account(address, balance):
	connection=connect_Azure()
	insert= ("INSERT INTO account "
               "(address, balance, hash) "
               "VALUES (%s, %s, 'coinbase')")
	data= (repr(address), balance)
	cursor = connection.cursor()
	cursor.execute(insert, data)
	cursor.close()
	connection.commit()
	connection.close()

if __name__ == "__main__":
	insert_account('c',10000)